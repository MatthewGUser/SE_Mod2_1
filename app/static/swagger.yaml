openapi: 3.0.0
info:
 title: Auto Shop API
 version: 1.0.0
 description: API for managing auto service tickets, mechanics, and inventory
servers:
 - url: http://localhost:5000
   description: Development server
components:
 securitySchemes:
  bearerAuth:
   type: http
   scheme: bearer
 schemas:
  ServiceTicket:
   type: object
   properties:
    id:
     type: integer
     example: 1
    title:
     type: string
     example: "Oil Change Service"
    description:
     type: string
     example: "Regular maintenance oil change"
    status:
     type: string
     enum: [pending, in_progress, completed]
     example: "pending"
    priority:
     type: string
     enum: [low, normal, high]
     example: "normal"
    user_id:
     type: integer
     example: 1
    created_at:
     type: string
     format: date-time
    updated_at:
     type: string
     format: date-time
    mechanics:
     type: array
     items:
      $ref: "#/components/schemas/Mechanic"
    parts:
     type: array
     items:
      $ref: "#/components/schemas/Inventory"
  Mechanic:
   type: object
   properties:
    id:
     type: integer
     example: 1
    name:
     type: string
     example: "John Smith"
    specialty:
     type: string
     example: "Engine Repair"
    email:
     type: string
     format: email
     example: "john@example.com"
    phone:
     type: string
     example: "123-456-7890"
    salary:
     type: number
     format: float
     example: 75000.00
    created_at:
     type: string
     format: date-time
    updated_at:
     type: string
     format: date-time
    service_tickets:
     type: array
     items:
      $ref: "#/components/schemas/ServiceTicket"
  Inventory:
   type: object
   properties:
    id:
     type: integer
     example: 1
    name:
     type: string
     example: "Brake Pad"
    part_number:
     type: string
     example: "BP-2024-001"
    price:
     type: number
     format: float
     example: 45.99
    quantity:
     type: integer
     example: 50
    created_at:
     type: string
     format: date-time
    updated_at:
     type: string
     format: date-time
    service_tickets:
     type: array
     items:
      $ref: "#/components/schemas/ServiceTicket"
security:
 - bearerAuth: []
tags:
 - name: Users
 - name: Service Tickets
 - name: Mechanics
 - name: Inventory
paths:
 /users:
  get:
   tags:
    - Users
   summary: Paginated Users
   security:
    - bearerAuth: []
   parameters:
    - name: page
      in: query
      schema:
       type: integer
      example: "1"
    - name: per_page
      in: query
      schema:
       type: integer
      example: "10"
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /users/my-tickets:
  get:
   tags:
    - Users
   summary: Get Tickets
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /users/register:
  post:
   tags:
    - Users
   summary: Register
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        name: Test User
        email: user@example.com
        password: password123
        phone: 123-456-7890
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /users/login:
  post:
   tags:
    - Users
   summary: Login
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        email: user@example.com
        password: password123
   responses:
    "200":
     description: Login successful
     content:
      application/json:
       schema:
        type: object
        properties:
         token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGc..."
         user:
          type: object
          properties:
           id:
            type: integer
            example: 1
           name:
            type: string
            example: "John Doe"
           email:
            type: string
            format: email
            example: "john@example.com"
    401:
     description: Invalid credentials
     content:
      application/json:
       schema:
        type: object
        properties:
         error:
          type: string
          example: "Invalid email or password"
 /users/1:
  put:
   tags:
    - Users
   summary: Update User
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        name: Updated Name
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  delete:
   tags:
    - Users
   summary: Delete User
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /service-tickets:
  get:
   tags:
    - Service Tickets
   summary: Paginated Tickets
   parameters:
    - name: page
      in: query
      schema:
       type: integer
      example: "1"
    - name: per_page
      in: query
      schema:
       type: integer
      example: "10"
   responses:
    "200":
     description: List of service tickets
     content:
      application/json:
       schema:
        type: object
        properties:
         tickets:
          type: array
          items:
           $ref: "#/components/schemas/ServiceTicket"
         total:
          type: integer
          example: 50
         pages:
          type: integer
          example: 5
         current_page:
          type: integer
          example: 1
         per_page:
          type: integer
          example: 10
         has_next:
          type: boolean
          example: true
         has_prev:
          type: boolean
          example: false
    401:
     description: Unauthorized
     content:
      application/json:
       schema:
        type: object
        properties:
         msg:
          type: string
          example: "Missing JWT token"
    403:
     description: Forbidden
     content:
      application/json:
       schema:
        type: object
        properties:
         message:
          type: string
          example: "Insufficient permissions"
  post:
   tags:
    - Service Tickets
   summary: Create Ticket
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        title: Test Ticket
        description: Test Description
        status: pending
        priority: normal
        mechanic_ids:
         - 1
        part_ids:
         - 1
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /service-tickets/1:
  get:
   tags:
    - Service Tickets
   summary: Get Ticket
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  put:
   tags:
    - Service Tickets
   summary: Update Ticket
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        VIN: 1HGCM82633A123456
        description: Updated oil change and tire rotation
        service_date: "2024-02-15"
        mechanic_ids:
         - 1
         - 2
        part_ids:
         - 1
         - 3
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  delete:
   tags:
    - Service Tickets
   summary: Delete Ticket
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /mechanics:
  get:
   tags:
    - Mechanics
   summary: Paginated Mechanics
   parameters:
    - name: page
      in: query
      schema:
       type: integer
      example: "1"
    - name: per_page
      in: query
      schema:
       type: integer
      example: "10"
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  post:
   tags:
    - Mechanics
   summary: Create Mechanic
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        name: John Smith
        specialty: Engine Repair
        email: john@example.com
        phone: 123-456-7890
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /mechanics/1:
  get:
   tags:
    - Mechanics
   summary: Get Mechanic
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  put:
   tags:
    - Mechanics
   summary: Update Mechanic
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        salary: 80000
        phone: 987-654-3210
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  delete:
   tags:
    - Mechanics
   summary: Delete Mechanic
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /inventory:
  get:
   tags:
    - Inventory
   summary: Get All Parts
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  post:
   tags:
    - Inventory
   summary: Create Part
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        name: Brake Pad
        part_number: BP-2024-001
        price: 45.99
        quantity: 50
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
 /inventory/1:
  put:
   tags:
    - Inventory
   summary: Update Part
   requestBody:
    content:
     application/json:
      schema:
       type: object
       example:
        name: Updated Part Name
        part_number: BP-2024-001
        price: 29.99
        quantity: 50
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
  delete:
   tags:
    - Inventory
   summary: Delete Part
   responses:
    "200":
     description: Successful response
     content:
      application/json: {}
